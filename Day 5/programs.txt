414	Array, Queue, Sorting, Simulation	https://leetcode.com/problems/reveal-cards-in-increasing-order	Medium																						
415	Array, Two Pointers, Greedy, Sorting	https://leetcode.com/problems/boats-to-save-people	Medium																						
416	Array, Hash Table, Divide and Conquer, Tree, Binary Tree	https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal	Medium																						
417	Array, Dynamic Programming, Binary Indexed Tree	https://leetcode.com/problems/count-number-of-teams	Medium																						
418	Hash Table, String, Bit Manipulation, Sliding Window, Rolling Hash, Hash Function	https://leetcode.com/problems/repeated-dna-sequences	Medium																						
419	Array, Hash Table, String	https://leetcode.com/problems/find-and-replace-pattern	Medium																						
420	Depth-First Search, Breadth-First Search, Union Find, Graph	https://leetcode.com/problems/number-of-operations-to-make-network-connected	Medium																						
421	Array, Divide and Conquer, Sorting, Heap (Priority Queue), Merge Sort, Bucket Sort, Radix Sort, Counting Sort	https://leetcode.com/problems/sort-an-array	Medium																						
==========================
Solution for reveal-cards
=============================
Great question!

You're referring to a **famous deck reveal problem** ‚Äî often seen in algorithm challenges ‚Äî where we **rearrange a deck of cards** so that when we perform a specific sequence of operations, the cards are revealed in **increasing order**.

---

## üéØ The Problem

You‚Äôre given a deck of cards (integers):

```
deck = [17, 13, 11, 2, 3, 5, 7]
```

You want to **reorder this deck** so that if you follow this procedure:

1. Reveal the top card.
2. Move the next top card to the bottom of the deck.
3. Repeat steps 1 and 2 until all cards are revealed,

‚Ä¶ the revealed cards come out in **increasing order**.

---

## ‚úÖ Expected Output

The final reordered deck is:

```
[2, 13, 3, 11, 5, 17, 7]
```

‚Üí So that when we simulate the "reveal-top, move-next-to-bottom" process, we get:

```
2 ‚Üí 3 ‚Üí 5 ‚Üí 7 ‚Üí 11 ‚Üí 13 ‚Üí 17
```

---

## üîÅ Strategy to Achieve This

### Key Insight:

You work **backward**.

To get increasing order during the reveal, we reverse the steps:

1. Start with a **sorted deck in ascending order**: `[2, 3, 5, 7, 11, 13, 17]`
2. Simulate the process **in reverse**:

   * Take the largest card,
   * If there's anything in the result deck, move its last element to the front (simulate "bottom to top"),
   * Then insert the current card at the front.

---

## üß† Python Code (Reverse Simulation)

```python
from collections import deque

deck = [17, 13, 11, 2, 3, 5, 7]
sdeck = sorted(deck)  # ascending

dq = deque()

for card in reversed(sdeck):
    if dq:
        dq.appendleft(dq.pop())  # move last to front
    dq.appendleft(card)

print(list(dq))
```

### ‚úÖ Output:

```
[2, 13, 3, 11, 5, 17, 7]
```

---

## üì¶ Explanation of Steps

Starting with sorted: `[2, 3, 5, 7, 11, 13, 17]` (go in reverse)

* Insert 17 ‚Üí `[17]`
* Move 17 to front, insert 13 ‚Üí `[13, 17]`
* Move 17 to front, insert 11 ‚Üí `[11, 13, 17]`
* Move 17 to front, insert 7 ‚Üí `[7, 11, 13, 17]`
* Move 17 to front, insert 5 ‚Üí `[5, 7, 11, 13, 17]`
* Move 17 to front, insert 3 ‚Üí `[3, 5, 7, 11, 13, 17]`
* Move 17 to front, insert 2 ‚Üí `[2, 3, 5, 7, 11, 13, 17]`

But because we rotated the elements in reverse, it becomes:

```
[2, 13, 3, 11, 5, 17, 7]
```


---

